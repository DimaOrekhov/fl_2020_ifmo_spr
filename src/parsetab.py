
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AlternativeOp ConcatOp Epsilon NewLine NonTerminal StartNonTerminal Terminal TransitionOpgrammar : rule NewLine grammargrammar : rulerule : NonTerminal TransitionOp lhs\n            | StartNonTerminal TransitionOp lhslhs : unitlhs : unit AlternativeOp lhsunit : NonTerminal\n            | StartNonTerminal\n            | Terminal\n            | Epsilonunit : NonTerminal ConcatOp unit\n            | Terminal ConcatOp unit\n            | StartNonTerminal ConcatOp unit\n            | Epsilon ConcatOp unit'
    
_lr_action_items = {'NonTerminal':([0,5,6,7,16,17,18,19,20,],[3,3,9,9,9,9,9,9,9,]),'StartNonTerminal':([0,5,6,7,16,17,18,19,20,],[4,4,12,12,12,12,12,12,12,]),'$end':([1,2,8,9,10,11,12,13,14,15,21,22,23,24,25,],[0,-2,-1,-7,-3,-5,-8,-9,-10,-4,-11,-6,-13,-12,-14,]),'NewLine':([2,9,10,11,12,13,14,15,21,22,23,24,25,],[5,-7,-3,-5,-8,-9,-10,-4,-11,-6,-13,-12,-14,]),'TransitionOp':([3,4,],[6,7,]),'Terminal':([6,7,16,17,18,19,20,],[13,13,13,13,13,13,13,]),'Epsilon':([6,7,16,17,18,19,20,],[14,14,14,14,14,14,14,]),'AlternativeOp':([9,11,12,13,14,21,23,24,25,],[-7,17,-8,-9,-10,-11,-13,-12,-14,]),'ConcatOp':([9,12,13,14,],[16,18,19,20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'grammar':([0,5,],[1,8,]),'rule':([0,5,],[2,2,]),'lhs':([6,7,17,],[10,15,22,]),'unit':([6,7,16,17,18,19,20,],[11,11,21,11,23,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> grammar","S'",1,None,None,None),
  ('grammar -> rule NewLine grammar','grammar',3,'p_grammar_recursive','grammar_parsing.py',40),
  ('grammar -> rule','grammar',1,'p_grammar_base','grammar_parsing.py',46),
  ('rule -> NonTerminal TransitionOp lhs','rule',3,'p_rule','grammar_parsing.py',51),
  ('rule -> StartNonTerminal TransitionOp lhs','rule',3,'p_rule','grammar_parsing.py',52),
  ('lhs -> unit','lhs',1,'p_lhs_base','grammar_parsing.py',57),
  ('lhs -> unit AlternativeOp lhs','lhs',3,'p_lhs_recursion','grammar_parsing.py',62),
  ('unit -> NonTerminal','unit',1,'p_unit_base','grammar_parsing.py',68),
  ('unit -> StartNonTerminal','unit',1,'p_unit_base','grammar_parsing.py',69),
  ('unit -> Terminal','unit',1,'p_unit_base','grammar_parsing.py',70),
  ('unit -> Epsilon','unit',1,'p_unit_base','grammar_parsing.py',71),
  ('unit -> NonTerminal ConcatOp unit','unit',3,'p_unit_recursion','grammar_parsing.py',79),
  ('unit -> Terminal ConcatOp unit','unit',3,'p_unit_recursion','grammar_parsing.py',80),
  ('unit -> StartNonTerminal ConcatOp unit','unit',3,'p_unit_recursion','grammar_parsing.py',81),
  ('unit -> Epsilon ConcatOp unit','unit',3,'p_unit_recursion','grammar_parsing.py',82),
]
